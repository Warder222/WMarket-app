import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, BotCommand
from aiogram.utils.keyboard import InlineKeyboardBuilder
from src.config import settings
from src.database.utils import get_user_info, get_product_info, get_all_users
import asyncio
import logging

from src.utils import is_admin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=settings.TG_BOT_TOKEN)
dp = Dispatcher()


async def send_notification_to_user(user_id: int, message: str, product_id: int = None):
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç"
        builder = InlineKeyboardBuilder()

        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode="HTML",
            reply_markup=builder.as_markup() if product_id else None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def set_main_menu(bot: Bot):
    # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    main_menu_commands = [
        BotCommand(command='/start', description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        BotCommand(command='/broadcast', description='–†–∞—Å—Å—ã–ª–∫–∞ (–∞–¥–º–∏–Ω)'),
    ]

    await bot.set_my_commands(main_menu_commands)


@dp.message(Command("start"))
async def handle_start(message: Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ deep links –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç
    args = message.text.split()
    if len(args) > 1 and args[1].startswith("chat_"):
        product_id = int(args[1].split("_")[1])
        product = await get_product_info(product_id, message.from_user.id)
        if product:
            await message.answer(
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é '{product[2]}' –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        web_app=types.WebAppInfo(url=f"{settings.MINI_APP_URL}/start_chat/{product_id}")
                    )
                ]])
            )
        else:
            await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        await message.answer(
            "–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. "
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=types.WebAppInfo(url=settings.MINI_APP_URL)
                )
            ]])
        )


# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è FSM
class BroadcastState(StatesGroup):
    waiting_for_message = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast
@dp.message(Command("broadcast"))
async def cmd_broadcast(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    await message.answer(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=types.ForceReply(selective=True)
    )
    await state.set_state(BroadcastState.waiting_for_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(BroadcastState.waiting_for_message, F.text)
async def process_broadcast_message(message: Message, state: FSMContext):
    broadcast_text = message.text
    users = await get_all_users()

    success = 0
    failed = 0

    for user_id in users:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"{broadcast_text}"
            )
            success += 1
            await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            failed += 1
            continue

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"‚ñ™ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ñ™ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )
    await state.clear()

async def start_bot():
    await set_main_menu(bot)
    await dp.start_polling(bot)